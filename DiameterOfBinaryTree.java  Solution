/*******
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.
*******/

//solution1
class Solution {
        int max = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        
        int left=0;
        int right = 0;
        TreeNode node = root;
        if(node == null) return 0;
        if(node.left == null && node.right == null ) {
            return 0;
        } else if(node.left == null) {
            right = traverse(node.right, max) + 1;
        } else if(node.right == null) {
           left = traverse(node.left, max) + 1;
        } else {
            left = traverse(node.left, max) + 1;
            right = traverse(node.right, max) + 1;
        }
        
        if((left+right) > max ) {
            max = (left+right);
        }
        return max;   
    }
    
    public int traverse(TreeNode node, int max) {
        int right=0;
        int left=0;
        if(node.left == null && node.right == null ) {
            return 0;
        } else if(node.left == null) {
            right = traverse(node.right, max) + 1;
        } else if(node.right == null) {
           left = traverse(node.left, max) + 1;
        } else {
            left = traverse(node.left, max) + 1;
            right = traverse(node.right, max) + 1;
        }
       
        if((left+right) > max ) {
            max = (left+right);
        }
        return Math.max(left, right); 
    }
    
}



//Solution 2
class Solution {
    int max = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int l = getLength(root.left), r = getLength(root.right);
        max = Math.max(max, l + r);
        return max;
    }
    
    private int getLength(TreeNode node) {
        if (node == null) {
            return 0;
        }
        int l = getLength(node.left), r = getLength(node.right);
        max = Math.max(max, l + r);
        return Math.max(l, r) + 1;
    }
}
